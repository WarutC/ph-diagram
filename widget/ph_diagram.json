{
  "alias": "latest_value",
  "name": "Ph Diagram",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 9.5,
    "sizeY": 7,
    "resources": [
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"
      }
    ],
    "templateHtml": "<canvas id=\"myChart\"></canvas>\n<div fxFlex fxLayout=\"row\" *ngFor=\"let dataKeyData of data\" fxLayoutAlign=\"space-around center\">\n        <div>{{dataKeyData.dataKey.label}}:</div>\n        <div>{{(dataKeyData.data[0] && dataKeyData.data[0][0]) | date : 'yyyy-MM-dd HH:mm:ss' }}</div>\n        <div>{{dataKeyData.data[0] && dataKeyData.data[0][1]}}</div>\n</div>",
    "templateCss": "",
    "controllerScript": "var myChart;\n\nself.onInit = function() {\n    self.ctx.$scope.data = self.ctx.defaultSubscription\n        .data;\n    let chartData = {\n        datasets: [{\n            data: [],\n            borderColor: 'black',\n            borderWidth: 1,\n            pointBackgroundColor: ['#000',\n                '#00bcd6', '#d300d6'\n            ],\n            pointBorderColor: ['#000',\n                '#00bcd6', '#d300d6'\n            ],\n            pointRadius: 5,\n            pointHoverRadius: 5,\n            fill: true,\n            tension: 0,\n            showLine: true\n        }]\n    };\n\n    var options = {\n        legend: false,\n        tooltips: false,\n        scales: {\n            xAxes: [{\n\n            }],\n            yAxes: [{\n                ticks: {\n                    min: 0.5,\n                    max: 90,\n                    // padding: 10\n                },\n                type: 'logarithmic',\n                display: true\n            }]\n        }\n    };\n\n    var canvasElement = $('#myChart', self.ctx\n        .$container)[0];\n    var canvasCtx = canvasElement.getContext('2d');\n\n    myChart = new Chart(canvasCtx, {\n        type: 'scatter',\n        data: chartData,\n        options: options\n    });\n    self.onResize();\n}\n\nself.onResize = function() {\n    myChart.resize();\n}\n\nself.onDataUpdated = function() {\n\n    console.log(self.ctx.defaultSubscription.data);\n    //Check when data avaliable\n    if (self.ctx.defaultSubscription.data[0].data\n        .length) {\n            \n        self.ctx.detectChanges();\n\n        myChart.data.datasets[0].data[0] = {\n            x: self.ctx\n                .defaultSubscription.data[0].data[0]\n                [\n                    1\n                ],\n            y: 3\n        }\n        myChart.data.datasets[0].data[1] = {\n            x: self.ctx\n                .defaultSubscription.data[1].data[0]\n                [\n                    1\n                ],\n            y: 3\n        }\n        myChart.data.datasets[0].data[2] = {\n            x: self.ctx\n                .defaultSubscription.data[2].data[0]\n                [\n                    1\n                ],\n            y: 12\n        }\n        myChart.data.datasets[0].data[3] = {\n            x: self.ctx\n                .defaultSubscription.data[3].data[0]\n                [\n                    1\n                ],\n            y: 12\n        }\n\n        // add same data as the first one, to draw the closing line\n        myChart.data.datasets[0].data[4] = myChart.data\n            .datasets[0].data[0]\n        myChart.update();\n    }\n}",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 2\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.4979233487936501,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 3\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.7066894951001068,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random 4\",\"color\":\"#ffc107\",\"settings\":{},\"_hash\":0.5985468956493032,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Ph Diagram\"}"
  }
}